import * as _moment from 'moment';
import { Injectable, NgModule, Component, ViewChild, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, ViewEncapsulation, defineInjectable } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment = _moment;
var DatepickerService = /** @class */ (function () {
    function DatepickerService() {
        this.months = [
            { value: 1, label: 'Jan' },
            { value: 2, label: 'Feb' },
            { value: 3, label: 'Mar' },
            { value: 4, label: 'Apr' },
            { value: 5, label: 'May' },
            { value: 6, label: 'Jun' },
            { value: 7, label: 'Jul' },
            { value: 8, label: 'Aug' },
            { value: 9, label: 'Sep' },
            { value: 10, label: 'Oct' },
            { value: 11, label: 'Nov' },
            { value: 12, label: 'Dec' },
        ];
    }
    /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    DatepickerService.prototype.generateMonthDate = /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    function (month, year) {
        if (month < 10) {
            month = '0' + month;
        }
        /** @type {?} */
        var day = Number(moment(year + '-' + month + '-01T00:00:00').format('d'));
        if (day === 'Invalid date') {
            throw "Looks like something went wrong with day Generation" + arguments[0] + arguments[1];
        }
        return day;
    };
    /**
     * @return {?}
     */
    DatepickerService.prototype.getMonths = /**
     * @return {?}
     */
    function () {
        return this.months;
    };
    /**
     * @param {?} startDay
     * @param {?} lastDay
     * @return {?}
     */
    DatepickerService.prototype.dateComposer = /**
     * @param {?} startDay
     * @param {?} lastDay
     * @return {?}
     */
    function (startDay, lastDay) {
        /** @type {?} */
        var composed = [];
        /** @type {?} */
        var dayCounter = 0;
        /** @type {?} */
        var counter = 0;
        /** @type {?} */
        var dayPointer = 0;
        /** @type {?} */
        var weekObj = { 'week': [] };
        while (dayCounter <= lastDay || dayPointer <= 6) {
            counter++;
            if (dayPointer > 6) {
                dayPointer = 0;
            }
            if (startDay === dayPointer || dayCounter > 0) {
                dayCounter++;
            }
            weekObj['week'].push({
                day: (dayCounter <= lastDay && dayCounter > 0) ? dayCounter : ''
            });
            dayPointer++;
            if (dayPointer > 6) {
                composed.push(weekObj);
                weekObj = { 'week': [] };
            }
            if (counter > 50) {
                throw "While Loop exceeding the allowed limit !!!!" + arguments[0] + arguments[1];
            }
        }
        return composed;
    };
    /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    DatepickerService.prototype.getMonthDates = /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    function (month, year) {
        /** @type {?} */
        var totalDays = 0;
        month = Number(month);
        year = Number(year);
        switch (month) {
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
            case 12:
                totalDays = 31;
                break;
            case 4:
            case 6:
            case 9:
            case 11:
                totalDays = 30;
                break;
            case 2:
                totalDays = (year % 4 == 0) ? 29 : 28;
                break;
            default:
                totalDays = 0;
                break;
        }
        return totalDays;
    };
    /**
     * @return {?}
     */
    DatepickerService.prototype.getYear = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var y = new Date();
        return y.getFullYear();
    };
    /**
     * @return {?}
     */
    DatepickerService.prototype.getYears = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var years = [];
        for (var i = 1950; i <= 2080; i++) {
            years.push(Number(i));
        }
        return years;
    };
    /**
     * @param {?} date
     * @param {?} format
     * @return {?}
     */
    DatepickerService.prototype.getDateFormatted = /**
     * @param {?} date
     * @param {?} format
     * @return {?}
     */
    function (date, format) {
        return moment(date).format(format);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DatepickerService.prototype.getDateMoment = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return moment(date);
    };
    /**
     * @return {?}
     */
    DatepickerService.prototype.getMonth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var y = new Date();
        /** @type {?} */
        var m = Number(y.getMonth()) + 1;
        return m;
    };
    DatepickerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DatepickerService.ctorParameters = function () { return []; };
    /** @nocollapse */ DatepickerService.ngInjectableDef = defineInjectable({ factory: function DatepickerService_Factory() { return new DatepickerService(); }, token: DatepickerService, providedIn: "root" });
    return DatepickerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatepickerComponent = /** @class */ (function () {
    function DatepickerComponent(datePickerService, changeDetect) {
        this.datePickerService = datePickerService;
        this.changeDetect = changeDetect;
        this.position = 'bottom';
        this.dateFormat = 'DD-MMM-YYYY';
        this.pickerHeight = 500;
        this.onDateSelect = new EventEmitter();
        this.inputOffset = 26;
        this.positioned = false;
        this.hide = true;
        this.myInput = '';
    }
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.items = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        this.months = this.datePickerService.getMonths();
        this.years = this.datePickerService.getYears();
        this.year = this.datePickerService.getYear();
        this.month = this.datePickerService.getMonth();
        this.genCalendarView();
        document.body.appendChild(this.pickerCompRef.nativeElement);
        this.detectChanges();
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.positionBody = /**
     * @return {?}
     */
    function () {
        if (!this.positioned) {
            this.positionElement();
        }
        this.openPicker();
    };
    /**
     * This is where the values updated in view in parent component gets updated in the child component here
     * @param myInput
     */
    /**
     * This is where the values updated in view in parent component gets updated in the child component here
     * @param {?} myInput
     * @return {?}
     */
    DatepickerComponent.prototype.writeValue = /**
     * This is where the values updated in view in parent component gets updated in the child component here
     * @param {?} myInput
     * @return {?}
     */
    function (myInput) {
        this.myInput = myInput;
        this.detectChanges();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatepickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatepickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onBlur = fn;
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.positionElement = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dropdownItem = this.pickerCompRef.nativeElement;
        dropdownItem['style']['top'] = this.elementTop + 'px';
        dropdownItem['style']['left'] = this.elementLeft + 'px';
        this.positioned = true;
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.getPosition = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rect = this.pickerInput.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var scrollTop = document.documentElement.scrollTop ?
            document.documentElement.scrollTop : document.body.scrollTop;
        /** @type {?} */
        var scrollLeft = document.documentElement.scrollLeft ?
            document.documentElement.scrollLeft : document.body.scrollLeft;
        this.elementTop = rect.top + scrollTop;
        this.elementLeft = rect.left + scrollLeft;
        switch (this.position) {
            case 'left':
                this.elementLeft -= 300;
                this.elementTop -= this.inputOffset - 20;
                break;
            case 'right':
                this.elementLeft += 200;
                this.elementTop -= this.inputOffset - 20;
                break;
            case 'top':
                this.elementTop -= 273;
                break;
            case 'bottom':
            default:
                this.elementTop += this.inputOffset;
                break;
        }
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.pickerCompRef.nativeElement.outerHTML = '';
    };
    /**
     * @param {?} day
     * @return {?}
     */
    DatepickerComponent.prototype.onDateSelection = /**
     * @param {?} day
     * @return {?}
     */
    function (day) {
        if (day < 10) {
            day = '0' + day;
        }
        /** @type {?} */
        var month = this.month;
        if (this.month < 10) {
            month = '0' + this.month;
        }
        /** @type {?} */
        var selectedDate = this.year + '-' + month + '-' + day;
        /** @type {?} */
        var dateObj = {
            formattedDate: this.datePickerService.getDateFormatted(selectedDate, this.dateFormat),
            dateObject: this.datePickerService.getDateMoment(selectedDate)
        };
        this.myInput = dateObj.formattedDate;
        this.onChange(this.myInput);
        this.onDateSelect.emit(dateObj.dateObject);
        this.closePicker();
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.genCalendarView = /**
     * @return {?}
     */
    function () {
        try {
            /** @type {?} */
            var startDay = this.datePickerService.generateMonthDate(this.month, this.year);
            /** @type {?} */
            var lastDay = this.datePickerService.getMonthDates(this.month, this.year);
            try {
                this.dateComposer = this.datePickerService.dateComposer(startDay, lastDay);
                this.detectChanges();
            }
            catch (e) {
                console.error(e);
            }
        }
        catch (e) {
            console.error(e);
        }
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.gotoPrevMonth = /**
     * @return {?}
     */
    function () {
        if (Number(this.month) === 1) {
            this.month = 12;
            this.year--;
        }
        else {
            this.month--;
        }
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.gotoNextMonth = /**
     * @return {?}
     */
    function () {
        if (Number(this.month) === 12) {
            this.month = 1;
            this.year++;
        }
        else {
            this.month++;
        }
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.openPicker = /**
     * @return {?}
     */
    function () {
        this.hide = false;
        this.detectChanges();
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.closePicker = /**
     * @return {?}
     */
    function () {
        this.hide = true;
        this.detectChanges();
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.detectChanges = /**
     * @return {?}
     */
    function () {
        this.changeDetect.detectChanges();
    };
    DatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'anglar-datepicker',
                    template: "<link href=\"https://fonts.googleapis.com/css?family=Material+Icons\" rel=\"stylesheet\">\r\n<input type=\"text\" (click)=\"getPosition();positionBody()\" [(ngModel)]=\"myInput\" #pickerInput />\r\n<div #pickerCompRef [ngClass]=\"{'hidePicker': hide, 'showPicker': !hide}\" class=\"suplug-container date-navigation override\">\r\n    <div (click)=\"closePicker()\" class=\"close-icon\">\r\n        <i class=\"material-icons\">clear</i>\r\n    </div>\r\n    <div class=\"navigation-pagination\">\r\n        <div class=\"left-pagination\">\r\n        <a class=\"date-navigation\" (click)=\"gotoPrevMonth();genCalendarView();\" href=\"javascript:;\"><i class=\"material-icons\">arrow_back_ios</i></a>\r\n        </div>\r\n        <div class=\"right-pagination\">\r\n            <a class=\"date-navigation\" (click)=\"gotoNextMonth();genCalendarView();\" href=\"javascript:;\"><i class=\"material-icons\">arrow_forward_ios</i></a>\r\n        </div>\r\n        <div class=\"month-navigation\">\r\n            <select (change)=\"genCalendarView()\" [(ngModel)]=\"month\">\r\n                <option *ngFor=\"let m of months\" value=\"{{m.value}}\">{{m.label}}</option>\r\n            </select>\r\n\r\n            <select class=\"date-navigation\" (change)=\"genCalendarView()\" [(ngModel)]=\"year\">\r\n                <option *ngFor=\"let y of years\" value=\"{{y}}\">{{y}}</option>\r\n            </select>\r\n        </div>  \r\n    </div>  \r\n    <table>\r\n        <tbody>\r\n            <tr>\r\n                <th *ngFor=\"let i of items\">{{i}}</th>\r\n            </tr>\r\n            <tr *ngFor=\"let weekData of dateComposer\">\r\n                <td (click)=\"onDateSelection(dayData.day)\" *ngFor=\"let dayData of weekData['week']\">\r\n                    <span *ngIf=\"dayData.day !== ''\">{{dayData.day}}</span>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n  </div>\r\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: DatepickerComponent,
                            multi: true
                        }],
                    styles: [".suplug-container.hidePicker{display:none}.suplug-container .material-icons{font-size:20px}.suplug-container.showPicker{display:inline-block}.suplug-container{border:1px solid #0a99c9;padding:10px;display:inline-block;background:#efefef;position:absolute}.suplug-container td,.suplug-container th{padding:6px 0;font-size:1em}.suplug-container td span{cursor:pointer;border:1px solid transparent;padding:7px}.suplug-container td span:hover{background:#ccc;border:1px solid #000;color:#fff}.suplug-container select{padding:3px;border:0;margin-right:10px}.suplug-container .navigation-pagination{margin:10px}.suplug-container .left-pagination{float:left}.suplug-container .month-navigation{text-align:center;padding-top:3px;margin-top:21px}.suplug-container .left-pagination a,.suplug-container .right-pagination a{font-size:1em;color:#000;text-decoration:none;font-weight:700;position:relative;top:3px}.suplug-container .left-pagination a:focus{border:0}.suplug-container .right-pagination{float:right}.suplug-container .close-icon{position:absolute;top:3px;right:3px;font-size:14px;color:#000;cursor:pointer}"]
                }] }
    ];
    /** @nocollapse */
    DatepickerComponent.ctorParameters = function () { return [
        { type: DatepickerService },
        { type: ChangeDetectorRef }
    ]; };
    DatepickerComponent.propDecorators = {
        position: [{ type: Input, args: ['position',] }],
        dateFormat: [{ type: Input, args: ['dateFormat',] }],
        onDateSelect: [{ type: Output }],
        pickerCompRef: [{ type: ViewChild, args: ['pickerCompRef',] }],
        pickerInput: [{ type: ViewChild, args: ['pickerInput',] }]
    };
    return DatepickerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AngularDatepickerModule = /** @class */ (function () {
    function AngularDatepickerModule() {
    }
    AngularDatepickerModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [DatepickerComponent],
                    imports: [
                        FormsModule, ReactiveFormsModule, CommonModule
                    ],
                    exports: [DatepickerComponent]
                },] }
    ];
    return AngularDatepickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DatepickerService, DatepickerComponent, AngularDatepickerModule };

//# sourceMappingURL=anglar-datepicker.js.map