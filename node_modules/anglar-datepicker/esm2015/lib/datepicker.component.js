/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DatepickerService } from './datepicker.service';
export class DatepickerComponent {
    /**
     * @param {?} datePickerService
     * @param {?} changeDetect
     */
    constructor(datePickerService, changeDetect) {
        this.datePickerService = datePickerService;
        this.changeDetect = changeDetect;
        this.position = 'bottom';
        this.dateFormat = 'DD-MMM-YYYY';
        this.pickerHeight = 500;
        this.onDateSelect = new EventEmitter();
        this.inputOffset = 26;
        this.positioned = false;
        this.hide = true;
        this.myInput = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.items = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        this.months = this.datePickerService.getMonths();
        this.years = this.datePickerService.getYears();
        this.year = this.datePickerService.getYear();
        this.month = this.datePickerService.getMonth();
        this.genCalendarView();
        document.body.appendChild(this.pickerCompRef.nativeElement);
        this.detectChanges();
    }
    /**
     * @return {?}
     */
    positionBody() {
        if (!this.positioned) {
            this.positionElement();
        }
        this.openPicker();
    }
    /**
     * This is where the values updated in view in parent component gets updated in the child component here
     * @param {?} myInput
     * @return {?}
     */
    writeValue(myInput) {
        this.myInput = myInput;
        this.detectChanges();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onBlur = fn;
    }
    /**
     * @return {?}
     */
    positionElement() {
        /** @type {?} */
        let dropdownItem = this.pickerCompRef.nativeElement;
        dropdownItem['style']['top'] = this.elementTop + 'px';
        dropdownItem['style']['left'] = this.elementLeft + 'px';
        this.positioned = true;
    }
    /**
     * @return {?}
     */
    getPosition() {
        /** @type {?} */
        let rect = this.pickerInput.nativeElement.getBoundingClientRect();
        /** @type {?} */
        let scrollTop = document.documentElement.scrollTop ?
            document.documentElement.scrollTop : document.body.scrollTop;
        /** @type {?} */
        let scrollLeft = document.documentElement.scrollLeft ?
            document.documentElement.scrollLeft : document.body.scrollLeft;
        this.elementTop = rect.top + scrollTop;
        this.elementLeft = rect.left + scrollLeft;
        switch (this.position) {
            case 'left':
                this.elementLeft -= 300;
                this.elementTop -= this.inputOffset - 20;
                break;
            case 'right':
                this.elementLeft += 200;
                this.elementTop -= this.inputOffset - 20;
                break;
            case 'top':
                this.elementTop -= 273;
                break;
            case 'bottom':
            default:
                this.elementTop += this.inputOffset;
                break;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.pickerCompRef.nativeElement.outerHTML = '';
    }
    /**
     * @param {?} day
     * @return {?}
     */
    onDateSelection(day) {
        if (day < 10) {
            day = '0' + day;
        }
        /** @type {?} */
        let month = this.month;
        if (this.month < 10) {
            month = '0' + this.month;
        }
        /** @type {?} */
        let selectedDate = this.year + '-' + month + '-' + day;
        /** @type {?} */
        let dateObj = {
            formattedDate: this.datePickerService.getDateFormatted(selectedDate, this.dateFormat),
            dateObject: this.datePickerService.getDateMoment(selectedDate)
        };
        this.myInput = dateObj.formattedDate;
        this.onChange(this.myInput);
        this.onDateSelect.emit(dateObj.dateObject);
        this.closePicker();
    }
    /**
     * @return {?}
     */
    genCalendarView() {
        try {
            /** @type {?} */
            let startDay = this.datePickerService.generateMonthDate(this.month, this.year);
            /** @type {?} */
            let lastDay = this.datePickerService.getMonthDates(this.month, this.year);
            try {
                this.dateComposer = this.datePickerService.dateComposer(startDay, lastDay);
                this.detectChanges();
            }
            catch (e) {
                console.error(e);
            }
        }
        catch (e) {
            console.error(e);
        }
    }
    /**
     * @return {?}
     */
    gotoPrevMonth() {
        if (Number(this.month) === 1) {
            this.month = 12;
            this.year--;
        }
        else {
            this.month--;
        }
    }
    /**
     * @return {?}
     */
    gotoNextMonth() {
        if (Number(this.month) === 12) {
            this.month = 1;
            this.year++;
        }
        else {
            this.month++;
        }
    }
    /**
     * @return {?}
     */
    openPicker() {
        this.hide = false;
        this.detectChanges();
    }
    /**
     * @return {?}
     */
    closePicker() {
        this.hide = true;
        this.detectChanges();
    }
    /**
     * @return {?}
     */
    detectChanges() {
        this.changeDetect.detectChanges();
    }
}
DatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'anglar-datepicker',
                template: "<link href=\"https://fonts.googleapis.com/css?family=Material+Icons\" rel=\"stylesheet\">\r\n<input type=\"text\" (click)=\"getPosition();positionBody()\" [(ngModel)]=\"myInput\" #pickerInput />\r\n<div #pickerCompRef [ngClass]=\"{'hidePicker': hide, 'showPicker': !hide}\" class=\"suplug-container date-navigation override\">\r\n    <div (click)=\"closePicker()\" class=\"close-icon\">\r\n        <i class=\"material-icons\">clear</i>\r\n    </div>\r\n    <div class=\"navigation-pagination\">\r\n        <div class=\"left-pagination\">\r\n        <a class=\"date-navigation\" (click)=\"gotoPrevMonth();genCalendarView();\" href=\"javascript:;\"><i class=\"material-icons\">arrow_back_ios</i></a>\r\n        </div>\r\n        <div class=\"right-pagination\">\r\n            <a class=\"date-navigation\" (click)=\"gotoNextMonth();genCalendarView();\" href=\"javascript:;\"><i class=\"material-icons\">arrow_forward_ios</i></a>\r\n        </div>\r\n        <div class=\"month-navigation\">\r\n            <select (change)=\"genCalendarView()\" [(ngModel)]=\"month\">\r\n                <option *ngFor=\"let m of months\" value=\"{{m.value}}\">{{m.label}}</option>\r\n            </select>\r\n\r\n            <select class=\"date-navigation\" (change)=\"genCalendarView()\" [(ngModel)]=\"year\">\r\n                <option *ngFor=\"let y of years\" value=\"{{y}}\">{{y}}</option>\r\n            </select>\r\n        </div>  \r\n    </div>  \r\n    <table>\r\n        <tbody>\r\n            <tr>\r\n                <th *ngFor=\"let i of items\">{{i}}</th>\r\n            </tr>\r\n            <tr *ngFor=\"let weekData of dateComposer\">\r\n                <td (click)=\"onDateSelection(dayData.day)\" *ngFor=\"let dayData of weekData['week']\">\r\n                    <span *ngIf=\"dayData.day !== ''\">{{dayData.day}}</span>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n  </div>\r\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: DatepickerComponent,
                        multi: true
                    }],
                styles: [".suplug-container.hidePicker{display:none}.suplug-container .material-icons{font-size:20px}.suplug-container.showPicker{display:inline-block}.suplug-container{border:1px solid #0a99c9;padding:10px;display:inline-block;background:#efefef;position:absolute}.suplug-container td,.suplug-container th{padding:6px 0;font-size:1em}.suplug-container td span{cursor:pointer;border:1px solid transparent;padding:7px}.suplug-container td span:hover{background:#ccc;border:1px solid #000;color:#fff}.suplug-container select{padding:3px;border:0;margin-right:10px}.suplug-container .navigation-pagination{margin:10px}.suplug-container .left-pagination{float:left}.suplug-container .month-navigation{text-align:center;padding-top:3px;margin-top:21px}.suplug-container .left-pagination a,.suplug-container .right-pagination a{font-size:1em;color:#000;text-decoration:none;font-weight:700;position:relative;top:3px}.suplug-container .left-pagination a:focus{border:0}.suplug-container .right-pagination{float:right}.suplug-container .close-icon{position:absolute;top:3px;right:3px;font-size:14px;color:#000;cursor:pointer}"]
            }] }
];
/** @nocollapse */
DatepickerComponent.ctorParameters = () => [
    { type: DatepickerService },
    { type: ChangeDetectorRef }
];
DatepickerComponent.propDecorators = {
    position: [{ type: Input, args: ['position',] }],
    dateFormat: [{ type: Input, args: ['dateFormat',] }],
    onDateSelect: [{ type: Output }],
    pickerCompRef: [{ type: ViewChild, args: ['pickerCompRef',] }],
    pickerInput: [{ type: ViewChild, args: ['pickerInput',] }]
};
if (false) {
    /** @type {?} */
    DatepickerComponent.prototype.position;
    /** @type {?} */
    DatepickerComponent.prototype.dateFormat;
    /** @type {?} */
    DatepickerComponent.prototype.pickerHeight;
    /** @type {?} */
    DatepickerComponent.prototype.onDateSelect;
    /** @type {?} */
    DatepickerComponent.prototype.pickerCompRef;
    /** @type {?} */
    DatepickerComponent.prototype.pickerInput;
    /** @type {?} */
    DatepickerComponent.prototype.elementTop;
    /** @type {?} */
    DatepickerComponent.prototype.elementLeft;
    /** @type {?} */
    DatepickerComponent.prototype.inputOffset;
    /** @type {?} */
    DatepickerComponent.prototype.positioned;
    /** @type {?} */
    DatepickerComponent.prototype.hide;
    /** @type {?} */
    DatepickerComponent.prototype.items;
    /** @type {?} */
    DatepickerComponent.prototype.dateComposer;
    /** @type {?} */
    DatepickerComponent.prototype.months;
    /** @type {?} */
    DatepickerComponent.prototype.month;
    /** @type {?} */
    DatepickerComponent.prototype.year;
    /** @type {?} */
    DatepickerComponent.prototype.years;
    /** @type {?} */
    DatepickerComponent.prototype.myInput;
    /** @type {?} */
    DatepickerComponent.prototype.onChange;
    /** @type {?} */
    DatepickerComponent.prototype.onBlur;
    /** @type {?} */
    DatepickerComponent.prototype.datePickerService;
    /** @type {?} */
    DatepickerComponent.prototype.changeDetect;
}
//# sourceMappingURL=data:application/json;base64,