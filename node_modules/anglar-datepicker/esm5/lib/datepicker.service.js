/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as _moment from 'moment';
import * as i0 from "@angular/core";
/** @type {?} */
var moment = _moment;
var DatepickerService = /** @class */ (function () {
    function DatepickerService() {
        this.months = [
            { value: 1, label: 'Jan' },
            { value: 2, label: 'Feb' },
            { value: 3, label: 'Mar' },
            { value: 4, label: 'Apr' },
            { value: 5, label: 'May' },
            { value: 6, label: 'Jun' },
            { value: 7, label: 'Jul' },
            { value: 8, label: 'Aug' },
            { value: 9, label: 'Sep' },
            { value: 10, label: 'Oct' },
            { value: 11, label: 'Nov' },
            { value: 12, label: 'Dec' },
        ];
    }
    /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    DatepickerService.prototype.generateMonthDate = /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    function (month, year) {
        if (month < 10) {
            month = '0' + month;
        }
        /** @type {?} */
        var day = Number(moment(year + '-' + month + '-01T00:00:00').format('d'));
        if (day === 'Invalid date') {
            throw "Looks like something went wrong with day Generation" + arguments[0] + arguments[1];
        }
        return day;
    };
    /**
     * @return {?}
     */
    DatepickerService.prototype.getMonths = /**
     * @return {?}
     */
    function () {
        return this.months;
    };
    /**
     * @param {?} startDay
     * @param {?} lastDay
     * @return {?}
     */
    DatepickerService.prototype.dateComposer = /**
     * @param {?} startDay
     * @param {?} lastDay
     * @return {?}
     */
    function (startDay, lastDay) {
        /** @type {?} */
        var composed = [];
        /** @type {?} */
        var dayCounter = 0;
        /** @type {?} */
        var counter = 0;
        /** @type {?} */
        var dayPointer = 0;
        /** @type {?} */
        var weekObj = { 'week': [] };
        while (dayCounter <= lastDay || dayPointer <= 6) {
            counter++;
            if (dayPointer > 6) {
                dayPointer = 0;
            }
            if (startDay === dayPointer || dayCounter > 0) {
                dayCounter++;
            }
            weekObj['week'].push({
                day: (dayCounter <= lastDay && dayCounter > 0) ? dayCounter : ''
            });
            dayPointer++;
            if (dayPointer > 6) {
                composed.push(weekObj);
                weekObj = { 'week': [] };
            }
            if (counter > 50) {
                throw "While Loop exceeding the allowed limit !!!!" + arguments[0] + arguments[1];
            }
        }
        return composed;
    };
    /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    DatepickerService.prototype.getMonthDates = /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    function (month, year) {
        /** @type {?} */
        var totalDays = 0;
        month = Number(month);
        year = Number(year);
        switch (month) {
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
            case 12:
                totalDays = 31;
                break;
            case 4:
            case 6:
            case 9:
            case 11:
                totalDays = 30;
                break;
            case 2:
                totalDays = (year % 4 == 0) ? 29 : 28;
                break;
            default:
                totalDays = 0;
                break;
        }
        return totalDays;
    };
    /**
     * @return {?}
     */
    DatepickerService.prototype.getYear = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var y = new Date();
        return y.getFullYear();
    };
    /**
     * @return {?}
     */
    DatepickerService.prototype.getYears = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var years = [];
        for (var i = 1950; i <= 2080; i++) {
            years.push(Number(i));
        }
        return years;
    };
    /**
     * @param {?} date
     * @param {?} format
     * @return {?}
     */
    DatepickerService.prototype.getDateFormatted = /**
     * @param {?} date
     * @param {?} format
     * @return {?}
     */
    function (date, format) {
        return moment(date).format(format);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DatepickerService.prototype.getDateMoment = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return moment(date);
    };
    /**
     * @return {?}
     */
    DatepickerService.prototype.getMonth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var y = new Date();
        /** @type {?} */
        var m = Number(y.getMonth()) + 1;
        return m;
    };
    DatepickerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DatepickerService.ctorParameters = function () { return []; };
    /** @nocollapse */ DatepickerService.ngInjectableDef = i0.defineInjectable({ factory: function DatepickerService_Factory() { return new DatepickerService(); }, token: DatepickerService, providedIn: "root" });
    return DatepickerService;
}());
export { DatepickerService };
if (false) {
    /** @type {?} */
    DatepickerService.prototype.months;
}
//# sourceMappingURL=data:application/json;base64,