import { Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
export class ChecklistDirective {
    constructor() {
        this.maxSelectedItems = -1;
        this.checklistChange = new EventEmitter();
    }
    ////////////
    ngOnChanges() {
        const checklist = this.checklist || [];
        this.isChecked = checklist.indexOf(this.checklistValue) >= 0;
    }
    triggerOnChange(target) {
        let updatedList;
        const checklist = this.checklist || [];
        if (target && target.checked) {
            if (this.maxSelectedItems === -1 || checklist.length < this.maxSelectedItems) {
                updatedList = [...checklist, this.checklistValue];
                this.checklistChange.emit(updatedList);
            }
            else {
                target.checked = false;
            }
        }
        else {
            const i = checklist.indexOf(this.checklistValue);
            updatedList = [...checklist.slice(0, i), ...checklist.slice(i + 1)];
            this.checklistChange.emit(updatedList);
        }
    }
}
ChecklistDirective.decorators = [
    { type: Directive, args: [{
                selector: '[checklist]'
            },] }
];
ChecklistDirective.propDecorators = {
    checklist: [{ type: Input }],
    checklistValue: [{ type: Input }],
    maxSelectedItems: [{ type: Input }],
    checklistChange: [{ type: Output }],
    isChecked: [{ type: HostBinding, args: ['checked',] }],
    triggerOnChange: [{ type: HostListener, args: ['change', ['$event.target'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tsaXN0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItY2hlY2tsaXN0L3NyYy9saWIvY2hlY2tsaXN0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLN0csTUFBTSxPQUFPLGtCQUFrQjtJQUgvQjtRQU9XLHFCQUFnQixHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQVMsQ0FBQztJQTRCeEQsQ0FBQztJQXpCQyxZQUFZO0lBRVosV0FBVztRQUNULE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFNEMsZUFBZSxDQUFDLE1BQXdCO1FBQ25GLElBQUksV0FBVyxDQUFDO1FBQ2hCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1FBRXZDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDNUIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQzVFLFdBQVcsR0FBRyxDQUFFLEdBQUcsU0FBUyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUUsQ0FBQztnQkFDcEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDeEM7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7YUFDeEI7U0FDRjthQUFNO1lBQ0wsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDakQsV0FBVyxHQUFHLENBQUUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFFLENBQUM7WUFDdEUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDeEM7SUFDSCxDQUFDOzs7WUFsQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2FBQ3hCOzs7d0JBR0UsS0FBSzs2QkFDTCxLQUFLOytCQUNMLEtBQUs7OEJBQ0wsTUFBTTt3QkFDTixXQUFXLFNBQUMsU0FBUzs4QkFTckIsWUFBWSxTQUFDLFFBQVEsRUFBRSxDQUFFLGVBQWUsQ0FBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NoZWNrbGlzdF0nXG59KVxuZXhwb3J0IGNsYXNzIENoZWNrbGlzdERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgQElucHV0KCkgY2hlY2tsaXN0OiBhbnlbXTtcbiAgQElucHV0KCkgY2hlY2tsaXN0VmFsdWU6IGFueTtcbiAgQElucHV0KCkgbWF4U2VsZWN0ZWRJdGVtcyA9IC0xO1xuICBAT3V0cHV0KCkgY2hlY2tsaXN0Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnlbXT4oKTtcbiAgQEhvc3RCaW5kaW5nKCdjaGVja2VkJykgaXNDaGVja2VkOiBib29sZWFuO1xuXG4gIC8vLy8vLy8vLy8vL1xuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGNvbnN0IGNoZWNrbGlzdCA9IHRoaXMuY2hlY2tsaXN0IHx8IFtdO1xuICAgIHRoaXMuaXNDaGVja2VkID0gY2hlY2tsaXN0LmluZGV4T2YodGhpcy5jaGVja2xpc3RWYWx1ZSkgPj0gMDtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NoYW5nZScsIFsgJyRldmVudC50YXJnZXQnIF0pIHRyaWdnZXJPbkNoYW5nZSh0YXJnZXQ6IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICBsZXQgdXBkYXRlZExpc3Q7XG4gICAgY29uc3QgY2hlY2tsaXN0ID0gdGhpcy5jaGVja2xpc3QgfHwgW107XG5cbiAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5jaGVja2VkKSB7XG4gICAgICBpZiAodGhpcy5tYXhTZWxlY3RlZEl0ZW1zID09PSAtMSB8fCBjaGVja2xpc3QubGVuZ3RoIDwgdGhpcy5tYXhTZWxlY3RlZEl0ZW1zKSB7XG4gICAgICAgIHVwZGF0ZWRMaXN0ID0gWyAuLi5jaGVja2xpc3QsIHRoaXMuY2hlY2tsaXN0VmFsdWUgXTtcbiAgICAgICAgdGhpcy5jaGVja2xpc3RDaGFuZ2UuZW1pdCh1cGRhdGVkTGlzdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXQuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpID0gY2hlY2tsaXN0LmluZGV4T2YodGhpcy5jaGVja2xpc3RWYWx1ZSk7XG4gICAgICB1cGRhdGVkTGlzdCA9IFsgLi4uY2hlY2tsaXN0LnNsaWNlKDAsIGkpLCAuLi5jaGVja2xpc3Quc2xpY2UoaSArIDEpIF07XG4gICAgICB0aGlzLmNoZWNrbGlzdENoYW5nZS5lbWl0KHVwZGF0ZWRMaXN0KTtcbiAgICB9XG4gIH1cblxufVxuIl19